{
	"name": "KrunkScript Programming Language",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#boolvalues"
		},
		{
			"include": "#global"
		},
		{
			"include": "#function"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		}
	],
	"comments": {
		"lineComment": "#"
	},
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "\\s*#[^\\n\\r]*"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.krnk",
					"match": "\\b(include|as|public|struct|break|continue|action|return|if|else|for|in|while|addTo|remove|lengthOf|notEmpty|hasProp|toStr|toNum)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "entity.name.type",
					"match": "\\b(bool|num|str|obj)\\b"
				},
				{
					"match": "\\b(struct)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.krnk"
						},
						"2": {
							"name": "entity.name.type"
						}
					}
				},
				{
					"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\s*(\\[\\])*\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "entity.name.type"
						},
						"3": {
							"name": "entity.name.tag"
						}
					}
				},
				{
					"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\s*{",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					}
				},
				{
					"match": "<([_a-zA-Z][_a-zA-Z0-9]*)\\s*(\\[\\])*>",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					}
				},
				{
					"match": "\\(([_a-zA-Z][_a-zA-Z0-9]*)\\s*(\\[\\])*\\)",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					}
				}
			]
		},
		"boolvalues": {
			"patterns": [
				{
					"name": "constant.language",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"global": {
			"patterns": [
				{
					"name":"constant.other",
					"match": "[A-Z]+(?=\\.)"
				}
			]
		},
		"function": {
			"patterns": [{
				"begin": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\(",
				"beginCaptures": {
					"1": {
						"name": "entity.name.function"
					}
				},
				"end": "\\)",
				"patterns": [
					{
						"include": "#keywords"
					},
					{
						"include": "#types"
					},
					{
						"include": "#boolvalues"
					},
					{
						"include": "#global"
					},
					{
						"include": "#function"
					},
					{
						"include": "#identifiers"
					},
					{
						"include": "#numbers"
					},
					{
						"include": "#strings"
					}
				]
			}]
		},
		"identifiers": {
			"patterns": [{
				"name": "entity.name.tag",
				"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
			}]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "(0[xX][0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?([eE][+-]?[0-9]+)?)"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.krnk",
			"begin": "[\"']",
			"end": "[\"']",
			"patterns": [
				{
					"name": "constant.character.escape.krnk",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.krnk"
}
